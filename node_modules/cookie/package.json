{
  "_args": [
    [
      "cookie@0.3.1",
      "/Users/cos/Documents/psycoder/cocoa"
    ]
  ],
  "_from": "cookie@0.3.1",
  "_id": "cookie@0.3.1",
  "_inBundle": false,
  "_integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=",
  "_location": "/cookie",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "cookie@0.3.1",
    "name": "cookie",
    "escapedName": "cookie",
    "rawSpec": "0.3.1",
    "saveSpec": null,
    "fetchSpec": "0.3.1"
  },
  "_requiredBy": [
    "/",
    "/express"
  ],
  "_resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
  "_spec": "0.3.1",
  "_where": "/Users/cos/Documents/psycoder/cocoa",
  "author": {
    "email": "shtylman@gmail.com",
    "name": "Roman Shtylman"
  },
  "bugs": {
    "url": "https://github.com/jshttp/cookie/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    }
  ],
  "description": "HTTP server cookie parsing and serialization",
  "devDependencies": {
    "istanbul": "0.4.3",
    "mocha": "1.21.5"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "homepage": "https://github.com/jshttp/cookie#readme",
  "keywords": [
    "cookie",
    "cookies"
  ],
  "license": "MIT",
  "name": "cookie",
  "optionalDependencies": {},
  "readme": "# cookie\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Node.js Version][node-version-image]][node-version-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nBasic HTTP cookie parser and serializer for HTTP servers.\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install cookie\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar cookie = require('cookie');\r\n```\r\n\r\n### cookie.parse(str, options)\r\n\r\nParse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.\r\nThe `str` argument is the string representing a `Cookie` header value and `options` is an\r\noptional object containing additional parsing options.\r\n\r\n```js\r\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\r\n// { foo: 'bar', equation: 'E=mc^2' }\r\n```\r\n\r\n#### Options\r\n\r\n`cookie.parse` accepts these properties in the options object.\r\n\r\n##### decode\r\n\r\nSpecifies a function that will be used to decode a cookie's value. Since the value of a cookie\r\nhas a limited character set (and must be a simple string), this function can be used to decode\r\na previously-encoded cookie value into a JavaScript string or other object.\r\n\r\nThe default function is the global `decodeURIComponent`, which will decode any URL-encoded\r\nsequences into their byte representations.\r\n\r\n**note** if an error is thrown from this function, the original, non-decoded cookie value will\r\nbe returned as the cookie's value.\r\n\r\n### cookie.serialize(name, value, options)\r\n\r\nSerialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the\r\nname for the cookie, the `value` argument is the value to set the cookie to, and the `options`\r\nargument is an optional object containing additional serialization options.\r\n\r\n```js\r\nvar setCookie = cookie.serialize('foo', 'bar');\r\n// foo=bar\r\n```\r\n\r\n#### Options\r\n\r\n`cookie.serialize` accepts these properties in the options object.\r\n\r\n##### domain\r\n\r\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6266-5.2.3]. By default, no\r\ndomain is set, and most clients will consider the cookie to apply to only the current domain.\r\n\r\n##### encode\r\n\r\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie\r\nhas a limited character set (and must be a simple string), this function can be used to encode\r\na value into a string suited for a cookie's value.\r\n\r\nThe default function is the global `ecodeURIComponent`, which will encode a JavaScript string\r\ninto UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\r\n\r\n##### expires\r\n\r\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6266-5.2.1].\r\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and\r\nwill delete it on a condition like exiting a web browser application.\r\n\r\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\r\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\r\nso if both are set, they should point to the same date and time.\r\n\r\n##### httpOnly\r\n\r\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6266-5.2.6]. When truthy,\r\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\r\n\r\n**note** be careful when setting this to `true`, as compliant clients will not allow client-side\r\nJavaScript to see the cookie in `document.cookie`.\r\n\r\n##### maxAge\r\n\r\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6266-5.2.2].\r\nThe given number will be converted to an integer by rounding down. By default, no maximum age is set.\r\n\r\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\r\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\r\nso if both are set, they should point to the same date and time.\r\n\r\n##### path\r\n\r\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6266-5.2.4]. By default, the path\r\nis considered the [\"default path\"][rfc-6266-5.1.4]. By default, no maximum age is set, and most\r\nclients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting\r\na web browser application.\r\n\r\n##### sameSite\r\n\r\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][draft-west-first-party-cookies-07].\r\n\r\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\r\n  - `false` will not set the `SameSite` attribute.\r\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\r\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\r\n\r\nMore information about the different enforcement levels can be found in the specification\r\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\r\n\r\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\r\nThis also means many clients may ignore this attribute until they understand it.\r\n\r\n##### secure\r\n\r\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6266-5.2.5]. When truthy,\r\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\r\n\r\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to\r\nthe server in the future if the browser does not have an HTTPS connection.\r\n\r\n## Example\r\n\r\nThe following example uses this module in conjunction with the Node.js core HTTP server\r\nto prompt a user for their name and display it back on future visits.\r\n\r\n```js\r\nvar cookie = require('cookie');\r\nvar escapeHtml = require('escape-html');\r\nvar http = require('http');\r\nvar url = require('url');\r\n\r\nfunction onRequest(req, res) {\r\n  // Parse the query string\r\n  var query = url.parse(req.url, true, true).query;\r\n\r\n  if (query && query.name) {\r\n    // Set a new cookie with the name\r\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\r\n      httpOnly: true,\r\n      maxAge: 60 * 60 * 24 * 7 // 1 week\r\n    }));\r\n\r\n    // Redirect back after setting cookie\r\n    res.statusCode = 302;\r\n    res.setHeader('Location', req.headers.referer || '/');\r\n    res.end();\r\n    return;\r\n  }\r\n\r\n  // Parse the cookies on the request\r\n  var cookies = cookie.parse(req.headers.cookie || '');\r\n\r\n  // Get the visitor name set in the cookie\r\n  var name = cookies.name;\r\n\r\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\r\n\r\n  if (name) {\r\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\r\n  } else {\r\n    res.write('<p>Hello, new visitor!</p>');\r\n  }\r\n\r\n  res.write('<form method=\"GET\">');\r\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\r\n  res.end('</form');\r\n}\r\n\r\nhttp.createServer(onRequest).listen(3000);\r\n```\r\n\r\n## Testing\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n## References\r\n\r\n- [RFC 6266: HTTP State Management Mechanism][rfc-6266]\r\n- [Same-site Cookies][draft-west-first-party-cookies-07]\r\n\r\n[draft-west-first-party-cookies-07]: https://tools.ietf.org/html/draft-west-first-party-cookies-07\r\n[rfc-6266]: https://tools.ietf.org/html/rfc6266\r\n[rfc-6266-5.1.4]: https://tools.ietf.org/html/rfc6266#section-5.1.4\r\n[rfc-6266-5.2.1]: https://tools.ietf.org/html/rfc6266#section-5.2.1\r\n[rfc-6266-5.2.2]: https://tools.ietf.org/html/rfc6266#section-5.2.2\r\n[rfc-6266-5.2.3]: https://tools.ietf.org/html/rfc6266#section-5.2.3\r\n[rfc-6266-5.2.4]: https://tools.ietf.org/html/rfc6266#section-5.2.4\r\n[rfc-6266-5.3]: https://tools.ietf.org/html/rfc6266#section-5.3\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/cookie.svg\r\n[npm-url]: https://npmjs.org/package/cookie\r\n[node-version-image]: https://img.shields.io/node/v/cookie.svg\r\n[node-version-url]: https://nodejs.org/en/download\r\n[travis-image]: https://img.shields.io/travis/jshttp/cookie/master.svg\r\n[travis-url]: https://travis-ci.org/jshttp/cookie\r\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/cookie/master.svg\r\n[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/cookie.svg\r\n[downloads-url]: https://npmjs.org/package/cookie\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jshttp/cookie.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
  },
  "version": "0.3.1"
}
